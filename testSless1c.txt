regression test for sless 1c reference design

	>>> from PolarVectorCAD import *

14 LE bridle points, 2 TE bridle points (in same bridle) -> 13 LE segments: 1 center, 6 per side
stack 7 segments (array command)
clip off at an angle to create shorter segments toward tips, length range: [16-10] lr
choose a segment incidence angle to create LE curve: [5°] ia
rotate segments into their final angle: grab 6, rotate by ia, grab 5 rotate, etc.
 
	>>> edgeVec=[]
	>>> for i in range(7):
	...     r=16-i # length [16,15,...,10]
	...     a=i*5 # angle [0,5,...,30]
	...     edgeVec.append(Edge(r,a))
	... 

choose a notch wall length: [8] nw
choose a notch angle: [8°] na (greater or equal to segment incidence angle ia)
make 7 notches total (array command) 
scale notches so smaller toward end, range: [100%-70%] -> 100, 95, 90, 85, 80, 75, 70% sn
choose mid and tip notch rotation angle: [8°,74°] sr, er 
  (should follow tension vector from bridle point, see wrinkle in canopy)
(74-8)/6=11 nr, so rotate each notch 11° using the same segment grab and rotate strategy
 
	>>> notchVec=[]
	>>> for i in range(7):
	...     r=8*(1-i*.05) # % of length 8 [100,95,...,70]
	...     a=8+i*11 # angle [8,19,...,74]
	...     notchVec.append(Notch(r,a,8))
	... 

interleave edges and notches

	>>> vecs=list(sum(zip(edgeVec,notchVec),())) # or we could have coded the above two as one loop
 
choose a tip width, tw, probably less than last segment length: [8]

	>>> vecs.append(Edge(8,90)) # tip: length 8, pointing down
 
use a reflection of the LE tip notch for the TE tip notch

	>>> vecs.append(deepcopy(vecs[-2]).mirror(90))

show vector information
 
	>>> for i in vecs:
	...     print(i)
	... 
	r:16 a:0
	r:8.0 a:8 c:8
	r:15 a:5
	r:7.6 a:19 c:8
	r:14 a:10
	r:7.2 a:30 c:8
	r:13 a:15
	r:6.8 a:41 c:8
	r:12 a:20
	r:6.4 a:52 c:8
	r:11 a:25
	r:6.0 a:63 c:8
	r:10 a:30
	r:5.6 a:74 c:8
	r:8 a:90
	r:5.6 a:106 c:8

show CAD command output

	>>> p=Point(0,0)
	>>> for i in vecs:
	...     print(i.draw(p)) # doctest:+ELLIPSIS
	... 
	_line 0,0 16.0,0.0
	_line 16.0,0.0 15.4419482...,7.9805124...
	_line 15.4419482...,7.9805124... 17.1052417...,0.1553315...
	_line 17.1052417...,0.1553315... 32.0481622...,1.4626677...
	_line 32.0481622...,1.4626677... 30.0811374...,8.8037040...
	_line 30.0811374...,8.8037040... 33.0506940...,1.8078671...
	_line 33.0506940...,1.8078671... 46.8380025...,4.2389416...
	_line 46.8380025...,4.2389416... 43.6817303...,10.710258...
	_line 43.6817303...,10.710258... 47.7079192...,4.7411882...
	_line 47.7079192...,4.7411882... 60.2649549...,8.1058358...
	_line 60.2649549...,8.1058358... 56.1726128...,13.536557...
	_line 56.1726128...,13.536557... 60.9809389...,8.7282311...
	_line 60.9809389...,8.7282311... 72.2572503...,12.832472...
	_line 72.2572503...,12.832472... 67.5011234...,17.114908...
	_line 67.5011234...,17.114908... 72.8069639...,13.536074...
	_line 72.8069639...,13.536074... 82.7763496...,18.184875...
	_line 82.7763496...,18.184875... 77.6333458...,21.275103...
	_line 77.6333458...,21.275103... 83.1563749...,18.930716...
	_line 83.1563749...,18.930716... 91.8166289...,23.930716...
	_line 91.8166289...,23.930716... 86.5543502...,25.846029...
	_line 86.5543502...,25.846029... 92.0319768...,24.681724...
	_line 92.0319768...,24.681724... 92.0319768...,32.681724...
	_line 92.0319768...,32.681724... 86.5543502...,31.517418...
	_line 86.5543502...,31.517418... 91.8166289...,33.432731...

end of regression test.

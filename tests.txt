These are the tests for PolarVectorCAD functionality.

First, import all the classes:

	>>> from PolarVectorCAD import *

Then, run all the tests:

Point Class

	>>> p=Point(1,2)
	>>> print(p)
	1,2
	>>> r=Point(3.3,4.4)
	>>> print(r)
	3.3,4.4
	>>> v=Point(1,2,3)
	>>> print(v)
	1,2,3
	>>> print(p.move(3,4))
	4,6
	>>> print(p)
	4,6

Bezier Class

	>>> p1=Point(1,2)
	>>> p2=Point(3,4)
	>>> p3=Point(5,6)
	>>> b=Bezier(p1,p2,p3)
	>>> b.draw()
	'_curve 1,2 3,4 5,6 _enter'

PolarVector Class

	>>> d=PolarVector(1,2)
	>>> e=Point(3,4)
	>>> f=d.move(e)
	>>> print(f) # doctest:+ELLIPSIS
	3.9993908...,4.0348994...
	>>> print(e) # doctest:+ELLIPSIS
	3.9993908...,4.0348994...
	>>> f is e
	True
	>>> s=PolarVector(99,45)
	>>> t=s.mirror(0)
	>>> t is s
	True
	>>> print(s)
	r:99 a:-45
	>>> print(s.mirror(45))
	r:99 a:135
	>>> v=PolarVector(5,6)
	>>> print(v)
	r:5 a:6
	>>> p=Point(1,2)
	>>> v.draw(p) # doctest:+ELLIPSIS
	'! start(1,2), vector r:5 a:6, end(5.9726094...,2.5226423...)'
	>>> print(p) # doctest:+ELLIPSIS
	5.9726094...,2.5226423...

Edge Class

	>>> e=Edge(1,2)
	>>> p=Point(3,4)
	>>> e.draw(p) # doctest:+ELLIPSIS
	'_line 3,4 3.9993908270...,4.0348994967...'
	>>> print(p) # doctest:+ELLIPSIS
	3.9993908270...,4.0348994967...

Notch Class

	>>> n=Notch(1,2,3)
	>>> print(n)
	r:1 a:2 c:3
	>>> p=Point(22,44)
	>>> print(n.draw(p)) # doctest:+ELLIPSIS
	_line 22,44 21.9912734...,44.9999619...
	_line 21.9912734...,44.9999619... 22.0523220...,44.0018271...
	>>> print(p) # doctest:+ELLIPSIS
	22.0523220...,44.0018271...

SmoothNotch Class

	>>> s=SmoothNotch(1,2,3,4)
	>>> print(s)
	r:1 a:2 c:3 s:4

end of main tests.
